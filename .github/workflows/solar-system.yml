name: Solar System Workflow
on:
    workflow_dispatch: 
    push:     
        branches: 
            - main
            - 'feature/*'

env:
  MONGO_URI: 'mongodb://${{ secrets.USERNAME}}:${{ secrets.PASSWORD }}@cluster0.7x6u1mv.mongodb.net/superData'
  MONGO_USERNAME: ${{ secrets.USERNAME }}
  MONGO_PASSWORD: ${{ secrets.PASSWORD}}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
             MONGO_URI: 'mongodb://localhost:27017/superData'
             MONGO_USERNAME: non-prod-user
             MONGO_PASSWORD: non-prod-password
        strategy:
          matrix:
            nodjs_version: [18, 20]
            operating_system: [ubuntu-latest]
        runs-on: ${{ matrix.operating_system }}
        steps:
            - name: Checkout Repo
              uses:  actions/checkout@v4

            - name: Setup NodeJs Version - ${{ matrix.nodjs_version }}
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.nodjs_version }}

            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json')}}

            - name: Install Dependencies
              run: npm install

            - name: Unit Testing
              id: nodejs-unit-testing-step
              run: npm test
            - name: Archive Test Result
              if: failure() && (steps.nodejs-unit-testing-step == 'failure' || steps.nodejs-unit-testing-step == 'success')
              uses: actions/upload-artifact@v4
              with:
                name: Mocha-Test-Resalt
                path: test-Resalt.xml

    code-coverage:
        name: Code Coverage
        container: 
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
             MONGO_URI: 'mongodb://mongo:27017/superData'
             MONGO_USERNAME: non-prod-user
             MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repo
              uses:  actions/checkout@v4

            # - name: Setup NodeJs Version - 18
            #   uses: actions/setup-node@v3
            #   with:
            #     node-version: 18

            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json')}}

            - name: Install Dependencies
              run: npm install

            - name: Check code Coverage
              continue-on-error: true
              run: npm Coverage
            - name: Archive Test Result
              uses: actions/upload-artifact@v4
              with:
                name: Code Coverage Result
                path: Covrerage
                retention-days: 5

    report-s3:
      needs: [unit-testing, code-coverage]
      name: AWS S3 -upload Reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Dowenload Mocha Test Artifact
          uses: actions/download-artifact@v4
          with:
            name: Mocha-Test-Result

        - name: Dowenload Mocha Coverage Artifact
          uses: actions/download-artifact@v4
          with:
            name: Mocha-Coverage-Result

        - name: Merge Test files
          run: |
           ls -ltr
           mkdir reports-${{ github.sha }}
           mv cobertura-coverage.xml reports-${{ github.sha }}/
           mv test-results.xml reports-${{ github.sha }}/
           ls -ltr reports-${{ github.sha }}/

        - name: Upload to AWS S3
          uses: jakejarvis/s3-sync-action@master
          with:
             args: --acl public-read --follow-symlinks --delete
          env:
             AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}  # name bucket
             AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
             AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             AWS_REGION: 'us-west-1'   # optional: defaults to us-east-1
             SOURCE_DIR: 'reports-${{ github.sha }}'
             DEST_DIR: 'reports-${{ github.sha }}'
    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
         - name: Checkout Repo
           uses:  actions/checkout@v4

         - name: Dockerhub Login
           uses: docker/login-action@v3
           with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
         - name: GHCR Login
           uses: docker/login-action@v3
           with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

         - name: Build and push
           uses: docker/build-push-action@v6
           with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

         - name: Docker Image testing
           run: |
             docker images
             docker run --name solar-system-app -d \
             -p 3000:3000 \
             -e MONGO_URI:$MONGO_URI \
             -e MONGO_PASSWORD:$MONGO_PASSWORD \
             -e MONGO_USERNAME:$MONGO_USERNAME \
             ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

             export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
             echo $IP
             echo Testing Iamge URL using wget
             wget -q -O - http://127.0.0.1:3000/live | grep live

         - name: Container Registry push
           uses: docker/build-push-action@v6
           with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/m0-3del/solar-system:${{ github.sha }}
    
    dev-deploy: 
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets: 
         k8s-kubecngig: ${{ secrets.KUBECONFIG }}
         mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        enviroment: development
        k8s-minfiest-dir: kubernetes/development/

    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.appliction-url }}
          run: |
           echo $URL
           echo "-------------------------"
           curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy: 
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets: 
         k8s-kubecngig: ${{ secrets.KUBECONFIG }}
         mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        enviroment: production
        k8s-minfiest-dir: kubernetes/production/
      
    prod-integration-testing:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.appliction-url }}
          run: |
           echo $URL
           echo "-------------------------"
           curl https://$URL/live -s -k | jq -r .status | grep -i live
  
    notify:
     if: always()
     name: Notification
     needs: [dev-integration-testing, prod-integration-testing]
     continue-on-error: true
     runs-on: ubuntu-latest

     steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Post Content :rocket:'
          SLACK_TITLE: Post Title
          SLACK_USERNAME: rtCamp
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Run Actions Telegram Notify
        uses: proDreams/actions-telegram-notifier@main
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          status: ${{ job.status }}
          notify_fields: "actor,repository,workflow,branch,commit"
          message: "Test message."
          footer: "Test footer"
      
      - name: Send Discord notification
        uses: stegzilla/discord-notify@v2
        with:
          webhook_url: ${{ secrets.DESCORD_BOT_TOKEN }}
          title: New PR opened
          message: "**${{ github.event.pull_request.title }}**\n**Creator:** ${{ github.event.pull_request.user.login }}\n${{ github.event.pull_request.html_url }}"
          include_image: true
          avatar_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
          username: GitHub PR Notifier